
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ce8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001df4  08001df4  00002df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e18  08001e18  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e18  08001e18  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e18  08001e18  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e18  08001e18  00002e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001e1c  08001e1c  00002e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001e20  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000010  08001e2c  00003010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08001e2c  00003080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005396  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017a0  00000000  00000000  000083cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000630  00000000  00000000  00009b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000489  00000000  00000000  0000a1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162b1  00000000  00000000  0000a629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007367  00000000  00000000  000208da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f145  00000000  00000000  00027c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a6d86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016b8  00000000  00000000  000a6dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000a8484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08001ddc 	.word	0x08001ddc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08001ddc 	.word	0x08001ddc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000150:	b088      	sub	sp, #32
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fa6c 	bl	8000630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f8a0 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f934 	bl	80003c8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000160:	f000 f8f4 	bl	800034c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000164:	2200      	movs	r2, #0
 8000166:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800016a:	4848      	ldr	r0, [pc, #288]	@ (800028c <main+0x140>)
 800016c:	f001 f95e 	bl	800142c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000170:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000174:	f000 fabe 	bl	80006f4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000178:	2201      	movs	r2, #1
 800017a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800017e:	4843      	ldr	r0, [pc, #268]	@ (800028c <main+0x140>)
 8000180:	f001 f954 	bl	800142c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000184:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000188:	f000 fab4 	bl	80006f4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000192:	483e      	ldr	r0, [pc, #248]	@ (800028c <main+0x140>)
 8000194:	f001 f94a 	bl	800142c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000198:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800019c:	f000 faaa 	bl	80006f4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80001a0:	2201      	movs	r2, #1
 80001a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001a6:	4839      	ldr	r0, [pc, #228]	@ (800028c <main+0x140>)
 80001a8:	f001 f940 	bl	800142c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80001ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001b0:	f000 faa0 	bl	80006f4 <HAL_Delay>

  uint32_t counter = (uint32_t)(*((volatile uint32_t*) (INFO_DATA_START_ADDR)));
 80001b4:	4b36      	ldr	r3, [pc, #216]	@ (8000290 <main+0x144>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	61bb      	str	r3, [r7, #24]

  HAL_FLASH_Unlock();
 80001ba:	f000 fe25 	bl	8000e08 <HAL_FLASH_Unlock>

  counter++;
 80001be:	69bb      	ldr	r3, [r7, #24]
 80001c0:	3301      	adds	r3, #1
 80001c2:	61bb      	str	r3, [r7, #24]
  counter = ((counter % 3) == 0) ? 0 : counter;
 80001c4:	69b9      	ldr	r1, [r7, #24]
 80001c6:	4b33      	ldr	r3, [pc, #204]	@ (8000294 <main+0x148>)
 80001c8:	fba3 2301 	umull	r2, r3, r3, r1
 80001cc:	085a      	lsrs	r2, r3, #1
 80001ce:	4613      	mov	r3, r2
 80001d0:	005b      	lsls	r3, r3, #1
 80001d2:	4413      	add	r3, r2
 80001d4:	1aca      	subs	r2, r1, r3
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d001      	beq.n	80001de <main+0x92>
 80001da:	69bb      	ldr	r3, [r7, #24]
 80001dc:	e000      	b.n	80001e0 <main+0x94>
 80001de:	2300      	movs	r3, #0
 80001e0:	61bb      	str	r3, [r7, #24]

  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t PageError;

  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_PAGES;
 80001e2:	2300      	movs	r3, #0
 80001e4:	607b      	str	r3, [r7, #4]
  EraseInitStruct.Banks 		= FLASH_BANK_1;
 80001e6:	2301      	movs	r3, #1
 80001e8:	60bb      	str	r3, [r7, #8]
  EraseInitStruct.PageAddress	= INFO_DATA_START_ADDR;
 80001ea:	4b29      	ldr	r3, [pc, #164]	@ (8000290 <main+0x144>)
 80001ec:	60fb      	str	r3, [r7, #12]
  EraseInitStruct.NbPages		= 1;
 80001ee:	2301      	movs	r3, #1
 80001f0:	613b      	str	r3, [r7, #16]
  HAL_FLASHEx_Erase( &EraseInitStruct, &PageError );
 80001f2:	463a      	mov	r2, r7
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	4611      	mov	r1, r2
 80001f8:	4618      	mov	r0, r3
 80001fa:	f000 fef3 	bl	8000fe4 <HAL_FLASHEx_Erase>

  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, INFO_DATA_START_ADDR, counter);
 80001fe:	69bb      	ldr	r3, [r7, #24]
 8000200:	2200      	movs	r2, #0
 8000202:	4698      	mov	r8, r3
 8000204:	4691      	mov	r9, r2
 8000206:	4642      	mov	r2, r8
 8000208:	464b      	mov	r3, r9
 800020a:	4921      	ldr	r1, [pc, #132]	@ (8000290 <main+0x144>)
 800020c:	2002      	movs	r0, #2
 800020e:	f000 fd8b 	bl	8000d28 <HAL_FLASH_Program>

  HAL_FLASH_Lock();
 8000212:	f000 fe1f 	bl	8000e54 <HAL_FLASH_Lock>

  counter = (uint32_t)(*((volatile uint32_t*) (INFO_DATA_START_ADDR)));
 8000216:	4b1e      	ldr	r3, [pc, #120]	@ (8000290 <main+0x144>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	61bb      	str	r3, [r7, #24]

  if (counter == 2)
 800021c:	69bb      	ldr	r3, [r7, #24]
 800021e:	2b02      	cmp	r3, #2
 8000220:	d130      	bne.n	8000284 <main+0x138>
  {
	  HAL_FLASH_Unlock();
 8000222:	f000 fdf1 	bl	8000e08 <HAL_FLASH_Unlock>

	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_PAGES;
 8000226:	2300      	movs	r3, #0
 8000228:	607b      	str	r3, [r7, #4]
	  EraseInitStruct.Banks 		= FLASH_BANK_1;
 800022a:	2301      	movs	r3, #1
 800022c:	60bb      	str	r3, [r7, #8]
	  EraseInitStruct.PageAddress	= APPPLICATION_START_ADDR;
 800022e:	4b1a      	ldr	r3, [pc, #104]	@ (8000298 <main+0x14c>)
 8000230:	60fb      	str	r3, [r7, #12]
	  EraseInitStruct.NbPages		= APPPLICATION_SIZE / 1024;
 8000232:	2310      	movs	r3, #16
 8000234:	613b      	str	r3, [r7, #16]
	  HAL_FLASHEx_Erase( &EraseInitStruct, &PageError );
 8000236:	463a      	mov	r2, r7
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	4611      	mov	r1, r2
 800023c:	4618      	mov	r0, r3
 800023e:	f000 fed1 	bl	8000fe4 <HAL_FLASHEx_Erase>

	  for (uint32_t i = 0; i < BK_APPPLICATION_SIZE; i+=4)
 8000242:	2300      	movs	r3, #0
 8000244:	61fb      	str	r3, [r7, #28]
 8000246:	e017      	b.n	8000278 <main+0x12c>
	  {
		  uint32_t data = (uint32_t)(*((volatile uint32_t*) (BK_APPPLICATION_START_ADDR + i)));
 8000248:	69fb      	ldr	r3, [r7, #28]
 800024a:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800024e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	617b      	str	r3, [r7, #20]
		  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, APPPLICATION_START_ADDR + i, data);
 8000256:	69fb      	ldr	r3, [r7, #28]
 8000258:	f103 6100 	add.w	r1, r3, #134217728	@ 0x8000000
 800025c:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
 8000260:	697b      	ldr	r3, [r7, #20]
 8000262:	2200      	movs	r2, #0
 8000264:	461c      	mov	r4, r3
 8000266:	4615      	mov	r5, r2
 8000268:	4622      	mov	r2, r4
 800026a:	462b      	mov	r3, r5
 800026c:	2002      	movs	r0, #2
 800026e:	f000 fd5b 	bl	8000d28 <HAL_FLASH_Program>
	  for (uint32_t i = 0; i < BK_APPPLICATION_SIZE; i+=4)
 8000272:	69fb      	ldr	r3, [r7, #28]
 8000274:	3304      	adds	r3, #4
 8000276:	61fb      	str	r3, [r7, #28]
 8000278:	69fb      	ldr	r3, [r7, #28]
 800027a:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 800027e:	d3e3      	bcc.n	8000248 <main+0xfc>
	  }

	  HAL_FLASH_Unlock();
 8000280:	f000 fdc2 	bl	8000e08 <HAL_FLASH_Unlock>
//  else
//  {
//	  HAL_NVIC_SystemReset();
//  }

  goto_application();
 8000284:	f000 f8ec 	bl	8000460 <goto_application>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000288:	bf00      	nop
 800028a:	e7fd      	b.n	8000288 <main+0x13c>
 800028c:	40011000 	.word	0x40011000
 8000290:	08003800 	.word	0x08003800
 8000294:	aaaaaaab 	.word	0xaaaaaaab
 8000298:	08004000 	.word	0x08004000

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b094      	sub	sp, #80	@ 0x50
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002a6:	2228      	movs	r2, #40	@ 0x28
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 fd6a 	bl	8001d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b0:	f107 0314 	add.w	r3, r7, #20
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002cc:	2301      	movs	r3, #1
 80002ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002da:	2301      	movs	r3, #1
 80002dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002de:	2302      	movs	r3, #2
 80002e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80002e8:	2300      	movs	r3, #0
 80002ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002f0:	4618      	mov	r0, r3
 80002f2:	f001 f8b3 	bl	800145c <HAL_RCC_OscConfig>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80002fc:	f000 f8c6 	bl	800048c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000300:	230f      	movs	r3, #15
 8000302:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000304:	2302      	movs	r3, #2
 8000306:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000308:	2300      	movs	r3, #0
 800030a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030c:	2300      	movs	r3, #0
 800030e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000314:	f107 0314 	add.w	r3, r7, #20
 8000318:	2100      	movs	r1, #0
 800031a:	4618      	mov	r0, r3
 800031c:	f001 fb20 	bl	8001960 <HAL_RCC_ClockConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000326:	f000 f8b1 	bl	800048c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800032a:	2302      	movs	r3, #2
 800032c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800032e:	2300      	movs	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4618      	mov	r0, r3
 8000336:	f001 fc6f 	bl	8001c18 <HAL_RCCEx_PeriphCLKConfig>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000340:	f000 f8a4 	bl	800048c <Error_Handler>
  }
}
 8000344:	bf00      	nop
 8000346:	3750      	adds	r7, #80	@ 0x50
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
 8000358:	605a      	str	r2, [r3, #4]
 800035a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800035c:	4b18      	ldr	r3, [pc, #96]	@ (80003c0 <MX_ADC1_Init+0x74>)
 800035e:	4a19      	ldr	r2, [pc, #100]	@ (80003c4 <MX_ADC1_Init+0x78>)
 8000360:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000362:	4b17      	ldr	r3, [pc, #92]	@ (80003c0 <MX_ADC1_Init+0x74>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000368:	4b15      	ldr	r3, [pc, #84]	@ (80003c0 <MX_ADC1_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800036e:	4b14      	ldr	r3, [pc, #80]	@ (80003c0 <MX_ADC1_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000374:	4b12      	ldr	r3, [pc, #72]	@ (80003c0 <MX_ADC1_Init+0x74>)
 8000376:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800037a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800037c:	4b10      	ldr	r3, [pc, #64]	@ (80003c0 <MX_ADC1_Init+0x74>)
 800037e:	2200      	movs	r2, #0
 8000380:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000382:	4b0f      	ldr	r3, [pc, #60]	@ (80003c0 <MX_ADC1_Init+0x74>)
 8000384:	2201      	movs	r2, #1
 8000386:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000388:	480d      	ldr	r0, [pc, #52]	@ (80003c0 <MX_ADC1_Init+0x74>)
 800038a:	f000 f9d7 	bl	800073c <HAL_ADC_Init>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000394:	f000 f87a 	bl	800048c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000398:	2300      	movs	r3, #0
 800039a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800039c:	2301      	movs	r3, #1
 800039e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003a0:	2300      	movs	r3, #0
 80003a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	4619      	mov	r1, r3
 80003a8:	4805      	ldr	r0, [pc, #20]	@ (80003c0 <MX_ADC1_Init+0x74>)
 80003aa:	f000 fa9f 	bl	80008ec <HAL_ADC_ConfigChannel>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80003b4:	f000 f86a 	bl	800048c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003b8:	bf00      	nop
 80003ba:	3710      	adds	r7, #16
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	2000002c 	.word	0x2000002c
 80003c4:	40012400 	.word	0x40012400

080003c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b088      	sub	sp, #32
 80003cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ce:	f107 0310 	add.w	r3, r7, #16
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000458 <MX_GPIO_Init+0x90>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000458 <MX_GPIO_Init+0x90>)
 80003e2:	f043 0310 	orr.w	r3, r3, #16
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000458 <MX_GPIO_Init+0x90>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f003 0310 	and.w	r3, r3, #16
 80003f0:	60fb      	str	r3, [r7, #12]
 80003f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003f4:	4b18      	ldr	r3, [pc, #96]	@ (8000458 <MX_GPIO_Init+0x90>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a17      	ldr	r2, [pc, #92]	@ (8000458 <MX_GPIO_Init+0x90>)
 80003fa:	f043 0320 	orr.w	r3, r3, #32
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b15      	ldr	r3, [pc, #84]	@ (8000458 <MX_GPIO_Init+0x90>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0320 	and.w	r3, r3, #32
 8000408:	60bb      	str	r3, [r7, #8]
 800040a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040c:	4b12      	ldr	r3, [pc, #72]	@ (8000458 <MX_GPIO_Init+0x90>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a11      	ldr	r2, [pc, #68]	@ (8000458 <MX_GPIO_Init+0x90>)
 8000412:	f043 0304 	orr.w	r3, r3, #4
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b0f      	ldr	r3, [pc, #60]	@ (8000458 <MX_GPIO_Init+0x90>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0304 	and.w	r3, r3, #4
 8000420:	607b      	str	r3, [r7, #4]
 8000422:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800042a:	480c      	ldr	r0, [pc, #48]	@ (800045c <MX_GPIO_Init+0x94>)
 800042c:	f000 fffe 	bl	800142c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000430:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000436:	2301      	movs	r3, #1
 8000438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043a:	2300      	movs	r3, #0
 800043c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043e:	2302      	movs	r3, #2
 8000440:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000442:	f107 0310 	add.w	r3, r7, #16
 8000446:	4619      	mov	r1, r3
 8000448:	4804      	ldr	r0, [pc, #16]	@ (800045c <MX_GPIO_Init+0x94>)
 800044a:	f000 fe73 	bl	8001134 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800044e:	bf00      	nop
 8000450:	3720      	adds	r7, #32
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	40021000 	.word	0x40021000
 800045c:	40011000 	.word	0x40011000

08000460 <goto_application>:

/* USER CODE BEGIN 4 */
static void goto_application(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0

  // Turn OFF the Green Led to tell the user that Bootloader is not running
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000466:	2201      	movs	r2, #1
 8000468:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800046c:	4805      	ldr	r0, [pc, #20]	@ (8000484 <goto_application+0x24>)
 800046e:	f000 ffdd 	bl	800142c <HAL_GPIO_WritePin>
//  __set_MSP(*(volatile uint32_t*) APPPLICATION_START_ADDR);

  /* Jump to application */
  void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (APPPLICATION_RESET_HANDLE_ADDR)));
 8000472:	4b05      	ldr	r3, [pc, #20]	@ (8000488 <goto_application+0x28>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	607b      	str	r3, [r7, #4]
  app_reset_handler();    //call the app reset handler
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4798      	blx	r3
}
 800047c:	bf00      	nop
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40011000 	.word	0x40011000
 8000488:	08004004 	.word	0x08004004

0800048c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000490:	b672      	cpsid	i
}
 8000492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <Error_Handler+0x8>

08000498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800049e:	4b15      	ldr	r3, [pc, #84]	@ (80004f4 <HAL_MspInit+0x5c>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	4a14      	ldr	r2, [pc, #80]	@ (80004f4 <HAL_MspInit+0x5c>)
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	6193      	str	r3, [r2, #24]
 80004aa:	4b12      	ldr	r3, [pc, #72]	@ (80004f4 <HAL_MspInit+0x5c>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	60bb      	str	r3, [r7, #8]
 80004b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b6:	4b0f      	ldr	r3, [pc, #60]	@ (80004f4 <HAL_MspInit+0x5c>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	4a0e      	ldr	r2, [pc, #56]	@ (80004f4 <HAL_MspInit+0x5c>)
 80004bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004c0:	61d3      	str	r3, [r2, #28]
 80004c2:	4b0c      	ldr	r3, [pc, #48]	@ (80004f4 <HAL_MspInit+0x5c>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ce:	4b0a      	ldr	r3, [pc, #40]	@ (80004f8 <HAL_MspInit+0x60>)
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	4a04      	ldr	r2, [pc, #16]	@ (80004f8 <HAL_MspInit+0x60>)
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ea:	bf00      	nop
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	40021000 	.word	0x40021000
 80004f8:	40010000 	.word	0x40010000

080004fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000504:	f107 0310 	add.w	r3, r7, #16
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a14      	ldr	r2, [pc, #80]	@ (8000568 <HAL_ADC_MspInit+0x6c>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d121      	bne.n	8000560 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800051c:	4b13      	ldr	r3, [pc, #76]	@ (800056c <HAL_ADC_MspInit+0x70>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	4a12      	ldr	r2, [pc, #72]	@ (800056c <HAL_ADC_MspInit+0x70>)
 8000522:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000526:	6193      	str	r3, [r2, #24]
 8000528:	4b10      	ldr	r3, [pc, #64]	@ (800056c <HAL_ADC_MspInit+0x70>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000534:	4b0d      	ldr	r3, [pc, #52]	@ (800056c <HAL_ADC_MspInit+0x70>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	4a0c      	ldr	r2, [pc, #48]	@ (800056c <HAL_ADC_MspInit+0x70>)
 800053a:	f043 0304 	orr.w	r3, r3, #4
 800053e:	6193      	str	r3, [r2, #24]
 8000540:	4b0a      	ldr	r3, [pc, #40]	@ (800056c <HAL_ADC_MspInit+0x70>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	f003 0304 	and.w	r3, r3, #4
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800054c:	2301      	movs	r3, #1
 800054e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000550:	2303      	movs	r3, #3
 8000552:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000554:	f107 0310 	add.w	r3, r7, #16
 8000558:	4619      	mov	r1, r3
 800055a:	4805      	ldr	r0, [pc, #20]	@ (8000570 <HAL_ADC_MspInit+0x74>)
 800055c:	f000 fdea 	bl	8001134 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000560:	bf00      	nop
 8000562:	3720      	adds	r7, #32
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40012400 	.word	0x40012400
 800056c:	40021000 	.word	0x40021000
 8000570:	40010800 	.word	0x40010800

08000574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <NMI_Handler+0x4>

0800057c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <HardFault_Handler+0x4>

08000584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <MemManage_Handler+0x4>

0800058c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <BusFault_Handler+0x4>

08000594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <UsageFault_Handler+0x4>

0800059c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr

080005a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr

080005b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr

080005c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005c4:	f000 f87a 	bl	80006bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}

080005cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 80005d0:	4b03      	ldr	r3, [pc, #12]	@ (80005e0 <SystemInit+0x14>)
 80005d2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80005d6:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005e4:	f7ff fff2 	bl	80005cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e8:	480b      	ldr	r0, [pc, #44]	@ (8000618 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005ea:	490c      	ldr	r1, [pc, #48]	@ (800061c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000620 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f0:	e002      	b.n	80005f8 <LoopCopyDataInit>

080005f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f6:	3304      	adds	r3, #4

080005f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005fc:	d3f9      	bcc.n	80005f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fe:	4a09      	ldr	r2, [pc, #36]	@ (8000624 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000600:	4c09      	ldr	r4, [pc, #36]	@ (8000628 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000604:	e001      	b.n	800060a <LoopFillZerobss>

08000606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000608:	3204      	adds	r2, #4

0800060a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800060c:	d3fb      	bcc.n	8000606 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800060e:	f001 fbc1 	bl	8001d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000612:	f7ff fd9b 	bl	800014c <main>
  bx lr
 8000616:	4770      	bx	lr
  ldr r0, =_sdata
 8000618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800061c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000620:	08001e20 	.word	0x08001e20
  ldr r2, =_sbss
 8000624:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000628:	20000080 	.word	0x20000080

0800062c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800062c:	e7fe      	b.n	800062c <ADC1_2_IRQHandler>
	...

08000630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000634:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <HAL_Init+0x28>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a07      	ldr	r2, [pc, #28]	@ (8000658 <HAL_Init+0x28>)
 800063a:	f043 0310 	orr.w	r3, r3, #16
 800063e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000640:	2003      	movs	r0, #3
 8000642:	f000 fb3d 	bl	8000cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000646:	200f      	movs	r0, #15
 8000648:	f000 f808 	bl	800065c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800064c:	f7ff ff24 	bl	8000498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000650:	2300      	movs	r3, #0
}
 8000652:	4618      	mov	r0, r3
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40022000 	.word	0x40022000

0800065c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000664:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <HAL_InitTick+0x54>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <HAL_InitTick+0x58>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4619      	mov	r1, r3
 800066e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000672:	fbb3 f3f1 	udiv	r3, r3, r1
 8000676:	fbb2 f3f3 	udiv	r3, r2, r3
 800067a:	4618      	mov	r0, r3
 800067c:	f000 fb47 	bl	8000d0e <HAL_SYSTICK_Config>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000686:	2301      	movs	r3, #1
 8000688:	e00e      	b.n	80006a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b0f      	cmp	r3, #15
 800068e:	d80a      	bhi.n	80006a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000690:	2200      	movs	r2, #0
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000698:	f000 fb1d 	bl	8000cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800069c:	4a06      	ldr	r2, [pc, #24]	@ (80006b8 <HAL_InitTick+0x5c>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006a2:	2300      	movs	r3, #0
 80006a4:	e000      	b.n	80006a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000000 	.word	0x20000000
 80006b4:	20000008 	.word	0x20000008
 80006b8:	20000004 	.word	0x20000004

080006bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006c0:	4b05      	ldr	r3, [pc, #20]	@ (80006d8 <HAL_IncTick+0x1c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b05      	ldr	r3, [pc, #20]	@ (80006dc <HAL_IncTick+0x20>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4413      	add	r3, r2
 80006cc:	4a03      	ldr	r2, [pc, #12]	@ (80006dc <HAL_IncTick+0x20>)
 80006ce:	6013      	str	r3, [r2, #0]
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr
 80006d8:	20000008 	.word	0x20000008
 80006dc:	2000005c 	.word	0x2000005c

080006e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return uwTick;
 80006e4:	4b02      	ldr	r3, [pc, #8]	@ (80006f0 <HAL_GetTick+0x10>)
 80006e6:	681b      	ldr	r3, [r3, #0]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	2000005c 	.word	0x2000005c

080006f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006fc:	f7ff fff0 	bl	80006e0 <HAL_GetTick>
 8000700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800070c:	d005      	beq.n	800071a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800070e:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <HAL_Delay+0x44>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	4413      	add	r3, r2
 8000718:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800071a:	bf00      	nop
 800071c:	f7ff ffe0 	bl	80006e0 <HAL_GetTick>
 8000720:	4602      	mov	r2, r0
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	68fa      	ldr	r2, [r7, #12]
 8000728:	429a      	cmp	r2, r3
 800072a:	d8f7      	bhi.n	800071c <HAL_Delay+0x28>
  {
  }
}
 800072c:	bf00      	nop
 800072e:	bf00      	nop
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000008 	.word	0x20000008

0800073c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000744:	2300      	movs	r3, #0
 8000746:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000748:	2300      	movs	r3, #0
 800074a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800074c:	2300      	movs	r3, #0
 800074e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d101      	bne.n	800075e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800075a:	2301      	movs	r3, #1
 800075c:	e0be      	b.n	80008dc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	689b      	ldr	r3, [r3, #8]
 8000762:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000768:	2b00      	cmp	r3, #0
 800076a:	d109      	bne.n	8000780 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2200      	movs	r2, #0
 8000770:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2200      	movs	r2, #0
 8000776:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f7ff febe 	bl	80004fc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f000 f9ab 	bl	8000adc <ADC_ConversionStop_Disable>
 8000786:	4603      	mov	r3, r0
 8000788:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800078e:	f003 0310 	and.w	r3, r3, #16
 8000792:	2b00      	cmp	r3, #0
 8000794:	f040 8099 	bne.w	80008ca <HAL_ADC_Init+0x18e>
 8000798:	7dfb      	ldrb	r3, [r7, #23]
 800079a:	2b00      	cmp	r3, #0
 800079c:	f040 8095 	bne.w	80008ca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007a4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80007a8:	f023 0302 	bic.w	r3, r3, #2
 80007ac:	f043 0202 	orr.w	r2, r3, #2
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007bc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	7b1b      	ldrb	r3, [r3, #12]
 80007c2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007c4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007c6:	68ba      	ldr	r2, [r7, #8]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80007d4:	d003      	beq.n	80007de <HAL_ADC_Init+0xa2>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d102      	bne.n	80007e4 <HAL_ADC_Init+0xa8>
 80007de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007e2:	e000      	b.n	80007e6 <HAL_ADC_Init+0xaa>
 80007e4:	2300      	movs	r3, #0
 80007e6:	693a      	ldr	r2, [r7, #16]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	7d1b      	ldrb	r3, [r3, #20]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d119      	bne.n	8000828 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	7b1b      	ldrb	r3, [r3, #12]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d109      	bne.n	8000810 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	3b01      	subs	r3, #1
 8000802:	035a      	lsls	r2, r3, #13
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	4313      	orrs	r3, r2
 8000808:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	e00b      	b.n	8000828 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000814:	f043 0220 	orr.w	r2, r3, #32
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000820:	f043 0201 	orr.w	r2, r3, #1
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	693a      	ldr	r2, [r7, #16]
 8000838:	430a      	orrs	r2, r1
 800083a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	689a      	ldr	r2, [r3, #8]
 8000842:	4b28      	ldr	r3, [pc, #160]	@ (80008e4 <HAL_ADC_Init+0x1a8>)
 8000844:	4013      	ands	r3, r2
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	6812      	ldr	r2, [r2, #0]
 800084a:	68b9      	ldr	r1, [r7, #8]
 800084c:	430b      	orrs	r3, r1
 800084e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000858:	d003      	beq.n	8000862 <HAL_ADC_Init+0x126>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d104      	bne.n	800086c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	691b      	ldr	r3, [r3, #16]
 8000866:	3b01      	subs	r3, #1
 8000868:	051b      	lsls	r3, r3, #20
 800086a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000872:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	430a      	orrs	r2, r1
 800087e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	689a      	ldr	r2, [r3, #8]
 8000886:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <HAL_ADC_Init+0x1ac>)
 8000888:	4013      	ands	r3, r2
 800088a:	68ba      	ldr	r2, [r7, #8]
 800088c:	429a      	cmp	r2, r3
 800088e:	d10b      	bne.n	80008a8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2200      	movs	r2, #0
 8000894:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800089a:	f023 0303 	bic.w	r3, r3, #3
 800089e:	f043 0201 	orr.w	r2, r3, #1
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008a6:	e018      	b.n	80008da <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008ac:	f023 0312 	bic.w	r3, r3, #18
 80008b0:	f043 0210 	orr.w	r2, r3, #16
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008bc:	f043 0201 	orr.w	r2, r3, #1
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80008c4:	2301      	movs	r3, #1
 80008c6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008c8:	e007      	b.n	80008da <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008ce:	f043 0210 	orr.w	r2, r3, #16
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80008da:	7dfb      	ldrb	r3, [r7, #23]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3718      	adds	r7, #24
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	ffe1f7fd 	.word	0xffe1f7fd
 80008e8:	ff1f0efe 	.word	0xff1f0efe

080008ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008f6:	2300      	movs	r3, #0
 80008f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000904:	2b01      	cmp	r3, #1
 8000906:	d101      	bne.n	800090c <HAL_ADC_ConfigChannel+0x20>
 8000908:	2302      	movs	r3, #2
 800090a:	e0dc      	b.n	8000ac6 <HAL_ADC_ConfigChannel+0x1da>
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2201      	movs	r2, #1
 8000910:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	2b06      	cmp	r3, #6
 800091a:	d81c      	bhi.n	8000956 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685a      	ldr	r2, [r3, #4]
 8000926:	4613      	mov	r3, r2
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	4413      	add	r3, r2
 800092c:	3b05      	subs	r3, #5
 800092e:	221f      	movs	r2, #31
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	43db      	mvns	r3, r3
 8000936:	4019      	ands	r1, r3
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	6818      	ldr	r0, [r3, #0]
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685a      	ldr	r2, [r3, #4]
 8000940:	4613      	mov	r3, r2
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4413      	add	r3, r2
 8000946:	3b05      	subs	r3, #5
 8000948:	fa00 f203 	lsl.w	r2, r0, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	430a      	orrs	r2, r1
 8000952:	635a      	str	r2, [r3, #52]	@ 0x34
 8000954:	e03c      	b.n	80009d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	2b0c      	cmp	r3, #12
 800095c:	d81c      	bhi.n	8000998 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685a      	ldr	r2, [r3, #4]
 8000968:	4613      	mov	r3, r2
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	4413      	add	r3, r2
 800096e:	3b23      	subs	r3, #35	@ 0x23
 8000970:	221f      	movs	r2, #31
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43db      	mvns	r3, r3
 8000978:	4019      	ands	r1, r3
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	6818      	ldr	r0, [r3, #0]
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	685a      	ldr	r2, [r3, #4]
 8000982:	4613      	mov	r3, r2
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	4413      	add	r3, r2
 8000988:	3b23      	subs	r3, #35	@ 0x23
 800098a:	fa00 f203 	lsl.w	r2, r0, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	430a      	orrs	r2, r1
 8000994:	631a      	str	r2, [r3, #48]	@ 0x30
 8000996:	e01b      	b.n	80009d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685a      	ldr	r2, [r3, #4]
 80009a2:	4613      	mov	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	4413      	add	r3, r2
 80009a8:	3b41      	subs	r3, #65	@ 0x41
 80009aa:	221f      	movs	r2, #31
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	43db      	mvns	r3, r3
 80009b2:	4019      	ands	r1, r3
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	6818      	ldr	r0, [r3, #0]
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685a      	ldr	r2, [r3, #4]
 80009bc:	4613      	mov	r3, r2
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	4413      	add	r3, r2
 80009c2:	3b41      	subs	r3, #65	@ 0x41
 80009c4:	fa00 f203 	lsl.w	r2, r0, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	430a      	orrs	r2, r1
 80009ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b09      	cmp	r3, #9
 80009d6:	d91c      	bls.n	8000a12 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	68d9      	ldr	r1, [r3, #12]
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	4613      	mov	r3, r2
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	4413      	add	r3, r2
 80009e8:	3b1e      	subs	r3, #30
 80009ea:	2207      	movs	r2, #7
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	43db      	mvns	r3, r3
 80009f2:	4019      	ands	r1, r3
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	6898      	ldr	r0, [r3, #8]
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4613      	mov	r3, r2
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	4413      	add	r3, r2
 8000a02:	3b1e      	subs	r3, #30
 8000a04:	fa00 f203 	lsl.w	r2, r0, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	e019      	b.n	8000a46 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	6919      	ldr	r1, [r3, #16]
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	4413      	add	r3, r2
 8000a22:	2207      	movs	r2, #7
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	4019      	ands	r1, r3
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	6898      	ldr	r0, [r3, #8]
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4613      	mov	r3, r2
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	4413      	add	r3, r2
 8000a3a:	fa00 f203 	lsl.w	r2, r0, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	430a      	orrs	r2, r1
 8000a44:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b10      	cmp	r3, #16
 8000a4c:	d003      	beq.n	8000a56 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000a52:	2b11      	cmp	r3, #17
 8000a54:	d132      	bne.n	8000abc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ad0 <HAL_ADC_ConfigChannel+0x1e4>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d125      	bne.n	8000aac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d126      	bne.n	8000abc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	689a      	ldr	r2, [r3, #8]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000a7c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2b10      	cmp	r3, #16
 8000a84:	d11a      	bne.n	8000abc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000a86:	4b13      	ldr	r3, [pc, #76]	@ (8000ad4 <HAL_ADC_ConfigChannel+0x1e8>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a13      	ldr	r2, [pc, #76]	@ (8000ad8 <HAL_ADC_ConfigChannel+0x1ec>)
 8000a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a90:	0c9a      	lsrs	r2, r3, #18
 8000a92:	4613      	mov	r3, r2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	4413      	add	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a9c:	e002      	b.n	8000aa4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d1f9      	bne.n	8000a9e <HAL_ADC_ConfigChannel+0x1b2>
 8000aaa:	e007      	b.n	8000abc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ab0:	f043 0220 	orr.w	r2, r3, #32
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	40012400 	.word	0x40012400
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	431bde83 	.word	0x431bde83

08000adc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d12e      	bne.n	8000b54 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	689a      	ldr	r2, [r3, #8]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f022 0201 	bic.w	r2, r2, #1
 8000b04:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000b06:	f7ff fdeb 	bl	80006e0 <HAL_GetTick>
 8000b0a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000b0c:	e01b      	b.n	8000b46 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000b0e:	f7ff fde7 	bl	80006e0 <HAL_GetTick>
 8000b12:	4602      	mov	r2, r0
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d914      	bls.n	8000b46 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d10d      	bne.n	8000b46 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b2e:	f043 0210 	orr.w	r2, r3, #16
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b3a:	f043 0201 	orr.w	r2, r3, #1
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e007      	b.n	8000b56 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d0dc      	beq.n	8000b0e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b92:	4a04      	ldr	r2, [pc, #16]	@ (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	60d3      	str	r3, [r2, #12]
}
 8000b98:	bf00      	nop
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bac:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	f003 0307 	and.w	r3, r3, #7
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	6039      	str	r1, [r7, #0]
 8000bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	db0a      	blt.n	8000bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	490c      	ldr	r1, [pc, #48]	@ (8000c10 <__NVIC_SetPriority+0x4c>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	0112      	lsls	r2, r2, #4
 8000be4:	b2d2      	uxtb	r2, r2
 8000be6:	440b      	add	r3, r1
 8000be8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bec:	e00a      	b.n	8000c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4908      	ldr	r1, [pc, #32]	@ (8000c14 <__NVIC_SetPriority+0x50>)
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	f003 030f 	and.w	r3, r3, #15
 8000bfa:	3b04      	subs	r3, #4
 8000bfc:	0112      	lsls	r2, r2, #4
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	440b      	add	r3, r1
 8000c02:	761a      	strb	r2, [r3, #24]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000e100 	.word	0xe000e100
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b089      	sub	sp, #36	@ 0x24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	f1c3 0307 	rsb	r3, r3, #7
 8000c32:	2b04      	cmp	r3, #4
 8000c34:	bf28      	it	cs
 8000c36:	2304      	movcs	r3, #4
 8000c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	2b06      	cmp	r3, #6
 8000c40:	d902      	bls.n	8000c48 <NVIC_EncodePriority+0x30>
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3b03      	subs	r3, #3
 8000c46:	e000      	b.n	8000c4a <NVIC_EncodePriority+0x32>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43da      	mvns	r2, r3
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6a:	43d9      	mvns	r1, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	4313      	orrs	r3, r2
         );
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3724      	adds	r7, #36	@ 0x24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr

08000c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c8c:	d301      	bcc.n	8000c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00f      	b.n	8000cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c92:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <SysTick_Config+0x40>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9a:	210f      	movs	r1, #15
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ca0:	f7ff ff90 	bl	8000bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca4:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <SysTick_Config+0x40>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000caa:	4b04      	ldr	r3, [pc, #16]	@ (8000cbc <SysTick_Config+0x40>)
 8000cac:	2207      	movs	r2, #7
 8000cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	e000e010 	.word	0xe000e010

08000cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff ff49 	bl	8000b60 <__NVIC_SetPriorityGrouping>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce8:	f7ff ff5e 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	6978      	ldr	r0, [r7, #20]
 8000cf4:	f7ff ff90 	bl	8000c18 <NVIC_EncodePriority>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff5f 	bl	8000bc4 <__NVIC_SetPriority>
}
 8000d06:	bf00      	nop
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ffb0 	bl	8000c7c <SysTick_Config>
 8000d1c:	4603      	mov	r3, r0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2a:	b087      	sub	sp, #28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000d42:	4b2f      	ldr	r3, [pc, #188]	@ (8000e00 <HAL_FLASH_Program+0xd8>)
 8000d44:	7e1b      	ldrb	r3, [r3, #24]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d101      	bne.n	8000d4e <HAL_FLASH_Program+0x26>
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	e054      	b.n	8000df8 <HAL_FLASH_Program+0xd0>
 8000d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8000e00 <HAL_FLASH_Program+0xd8>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000d54:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000d58:	f000 f8a8 	bl	8000eac <FLASH_WaitForLastOperation>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000d60:	7dfb      	ldrb	r3, [r7, #23]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d144      	bne.n	8000df0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d102      	bne.n	8000d72 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	757b      	strb	r3, [r7, #21]
 8000d70:	e007      	b.n	8000d82 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d102      	bne.n	8000d7e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	757b      	strb	r3, [r7, #21]
 8000d7c:	e001      	b.n	8000d82 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000d7e:	2304      	movs	r3, #4
 8000d80:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000d82:	2300      	movs	r3, #0
 8000d84:	75bb      	strb	r3, [r7, #22]
 8000d86:	e02d      	b.n	8000de4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000d88:	7dbb      	ldrb	r3, [r7, #22]
 8000d8a:	005a      	lsls	r2, r3, #1
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	eb02 0c03 	add.w	ip, r2, r3
 8000d92:	7dbb      	ldrb	r3, [r7, #22]
 8000d94:	0119      	lsls	r1, r3, #4
 8000d96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d9a:	f1c1 0620 	rsb	r6, r1, #32
 8000d9e:	f1a1 0020 	sub.w	r0, r1, #32
 8000da2:	fa22 f401 	lsr.w	r4, r2, r1
 8000da6:	fa03 f606 	lsl.w	r6, r3, r6
 8000daa:	4334      	orrs	r4, r6
 8000dac:	fa23 f000 	lsr.w	r0, r3, r0
 8000db0:	4304      	orrs	r4, r0
 8000db2:	fa23 f501 	lsr.w	r5, r3, r1
 8000db6:	b2a3      	uxth	r3, r4
 8000db8:	4619      	mov	r1, r3
 8000dba:	4660      	mov	r0, ip
 8000dbc:	f000 f85a 	bl	8000e74 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000dc0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000dc4:	f000 f872 	bl	8000eac <FLASH_WaitForLastOperation>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8000e04 <HAL_FLASH_Program+0xdc>)
 8000dce:	691b      	ldr	r3, [r3, #16]
 8000dd0:	4a0c      	ldr	r2, [pc, #48]	@ (8000e04 <HAL_FLASH_Program+0xdc>)
 8000dd2:	f023 0301 	bic.w	r3, r3, #1
 8000dd6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000dd8:	7dfb      	ldrb	r3, [r7, #23]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d107      	bne.n	8000dee <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000dde:	7dbb      	ldrb	r3, [r7, #22]
 8000de0:	3301      	adds	r3, #1
 8000de2:	75bb      	strb	r3, [r7, #22]
 8000de4:	7dba      	ldrb	r2, [r7, #22]
 8000de6:	7d7b      	ldrb	r3, [r7, #21]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d3cd      	bcc.n	8000d88 <HAL_FLASH_Program+0x60>
 8000dec:	e000      	b.n	8000df0 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000dee:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000df0:	4b03      	ldr	r3, [pc, #12]	@ (8000e00 <HAL_FLASH_Program+0xd8>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	761a      	strb	r2, [r3, #24]

  return status;
 8000df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	371c      	adds	r7, #28
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e00:	20000060 	.word	0x20000060
 8000e04:	40022000 	.word	0x40022000

08000e08 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e12:	4b0d      	ldr	r3, [pc, #52]	@ (8000e48 <HAL_FLASH_Unlock+0x40>)
 8000e14:	691b      	ldr	r3, [r3, #16]
 8000e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d00d      	beq.n	8000e3a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e48 <HAL_FLASH_Unlock+0x40>)
 8000e20:	4a0a      	ldr	r2, [pc, #40]	@ (8000e4c <HAL_FLASH_Unlock+0x44>)
 8000e22:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000e24:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <HAL_FLASH_Unlock+0x40>)
 8000e26:	4a0a      	ldr	r2, [pc, #40]	@ (8000e50 <HAL_FLASH_Unlock+0x48>)
 8000e28:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e2a:	4b07      	ldr	r3, [pc, #28]	@ (8000e48 <HAL_FLASH_Unlock+0x40>)
 8000e2c:	691b      	ldr	r3, [r3, #16]
 8000e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40022000 	.word	0x40022000
 8000e4c:	45670123 	.word	0x45670123
 8000e50:	cdef89ab 	.word	0xcdef89ab

08000e54 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000e58:	4b05      	ldr	r3, [pc, #20]	@ (8000e70 <HAL_FLASH_Lock+0x1c>)
 8000e5a:	691b      	ldr	r3, [r3, #16]
 8000e5c:	4a04      	ldr	r2, [pc, #16]	@ (8000e70 <HAL_FLASH_Lock+0x1c>)
 8000e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e62:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40022000 	.word	0x40022000

08000e74 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e80:	4b08      	ldr	r3, [pc, #32]	@ (8000ea4 <FLASH_Program_HalfWord+0x30>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000e86:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <FLASH_Program_HalfWord+0x34>)
 8000e88:	691b      	ldr	r3, [r3, #16]
 8000e8a:	4a07      	ldr	r2, [pc, #28]	@ (8000ea8 <FLASH_Program_HalfWord+0x34>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	887a      	ldrh	r2, [r7, #2]
 8000e96:	801a      	strh	r2, [r3, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000060 	.word	0x20000060
 8000ea8:	40022000 	.word	0x40022000

08000eac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000eb4:	f7ff fc14 	bl	80006e0 <HAL_GetTick>
 8000eb8:	6178      	str	r0, [r7, #20]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000eba:	e010      	b.n	8000ede <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ec2:	d00c      	beq.n	8000ede <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d007      	beq.n	8000eda <FLASH_WaitForLastOperation+0x2e>
 8000eca:	f7ff fc09 	bl	80006e0 <HAL_GetTick>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d201      	bcs.n	8000ede <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	e02b      	b.n	8000f36 <FLASH_WaitForLastOperation+0x8a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000ede:	4b18      	ldr	r3, [pc, #96]	@ (8000f40 <FLASH_WaitForLastOperation+0x94>)
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d1e8      	bne.n	8000ebc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000eea:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <FLASH_WaitForLastOperation+0x94>)
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	f003 0320 	and.w	r3, r3, #32
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d002      	beq.n	8000efc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000ef6:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <FLASH_WaitForLastOperation+0x94>)
 8000ef8:	2220      	movs	r2, #32
 8000efa:	60da      	str	r2, [r3, #12]
  }
  
  uint32_t FLAG_WRPERR = __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR);
 8000efc:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <FLASH_WaitForLastOperation+0x94>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	f003 0310 	and.w	r3, r3, #16
 8000f04:	613b      	str	r3, [r7, #16]
  uint32_t FLAG_OPTVERR = __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR);
 8000f06:	4b0e      	ldr	r3, [pc, #56]	@ (8000f40 <FLASH_WaitForLastOperation+0x94>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
  uint32_t FLAG_PGERR = __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR);
 8000f10:	4b0b      	ldr	r3, [pc, #44]	@ (8000f40 <FLASH_WaitForLastOperation+0x94>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	60bb      	str	r3, [r7, #8]
  if(FLAG_WRPERR  ||
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d105      	bne.n	8000f2c <FLASH_WaitForLastOperation+0x80>
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d102      	bne.n	8000f2c <FLASH_WaitForLastOperation+0x80>
		  FLAG_OPTVERR ||
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <FLASH_WaitForLastOperation+0x88>
//  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  ||
//     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) ||
//     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000f2c:	f000 f80a 	bl	8000f44 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e000      	b.n	8000f36 <FLASH_WaitForLastOperation+0x8a>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40022000 	.word	0x40022000

08000f44 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000f4e:	4b23      	ldr	r3, [pc, #140]	@ (8000fdc <FLASH_SetErrorCode+0x98>)
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	f003 0310 	and.w	r3, r3, #16
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d009      	beq.n	8000f6e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000f5a:	4b21      	ldr	r3, [pc, #132]	@ (8000fe0 <FLASH_SetErrorCode+0x9c>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	f043 0302 	orr.w	r3, r3, #2
 8000f62:	4a1f      	ldr	r2, [pc, #124]	@ (8000fe0 <FLASH_SetErrorCode+0x9c>)
 8000f64:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f043 0310 	orr.w	r3, r3, #16
 8000f6c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fdc <FLASH_SetErrorCode+0x98>)
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d009      	beq.n	8000f8e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000f7a:	4b19      	ldr	r3, [pc, #100]	@ (8000fe0 <FLASH_SetErrorCode+0x9c>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	4a17      	ldr	r2, [pc, #92]	@ (8000fe0 <FLASH_SetErrorCode+0x9c>)
 8000f84:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f043 0304 	orr.w	r3, r3, #4
 8000f8c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000f8e:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <FLASH_SetErrorCode+0x98>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00b      	beq.n	8000fb2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <FLASH_SetErrorCode+0x9c>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	f043 0304 	orr.w	r3, r3, #4
 8000fa2:	4a0f      	ldr	r2, [pc, #60]	@ (8000fe0 <FLASH_SetErrorCode+0x9c>)
 8000fa4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fdc <FLASH_SetErrorCode+0x98>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	4a0c      	ldr	r2, [pc, #48]	@ (8000fdc <FLASH_SetErrorCode+0x98>)
 8000fac:	f023 0301 	bic.w	r3, r3, #1
 8000fb0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f240 1201 	movw	r2, #257	@ 0x101
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d106      	bne.n	8000fca <FLASH_SetErrorCode+0x86>
 8000fbc:	4b07      	ldr	r3, [pc, #28]	@ (8000fdc <FLASH_SetErrorCode+0x98>)
 8000fbe:	69db      	ldr	r3, [r3, #28]
 8000fc0:	4a06      	ldr	r2, [pc, #24]	@ (8000fdc <FLASH_SetErrorCode+0x98>)
 8000fc2:	f023 0301 	bic.w	r3, r3, #1
 8000fc6:	61d3      	str	r3, [r2, #28]
}  
 8000fc8:	e002      	b.n	8000fd0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000fca:	4a04      	ldr	r2, [pc, #16]	@ (8000fdc <FLASH_SetErrorCode+0x98>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	60d3      	str	r3, [r2, #12]
}  
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40022000 	.word	0x40022000
 8000fe0:	20000060 	.word	0x20000060

08000fe4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000ff6:	4b2f      	ldr	r3, [pc, #188]	@ (80010b4 <HAL_FLASHEx_Erase+0xd0>)
 8000ff8:	7e1b      	ldrb	r3, [r3, #24]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d101      	bne.n	8001002 <HAL_FLASHEx_Erase+0x1e>
 8000ffe:	2302      	movs	r3, #2
 8001000:	e053      	b.n	80010aa <HAL_FLASHEx_Erase+0xc6>
 8001002:	4b2c      	ldr	r3, [pc, #176]	@ (80010b4 <HAL_FLASHEx_Erase+0xd0>)
 8001004:	2201      	movs	r2, #1
 8001006:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b02      	cmp	r3, #2
 800100e:	d116      	bne.n	800103e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001010:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001014:	f7ff ff4a 	bl	8000eac <FLASH_WaitForLastOperation>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d141      	bne.n	80010a2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800101e:	2001      	movs	r0, #1
 8001020:	f000 f84c 	bl	80010bc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001024:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001028:	f7ff ff40 	bl	8000eac <FLASH_WaitForLastOperation>
 800102c:	4603      	mov	r3, r0
 800102e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001030:	4b21      	ldr	r3, [pc, #132]	@ (80010b8 <HAL_FLASHEx_Erase+0xd4>)
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	4a20      	ldr	r2, [pc, #128]	@ (80010b8 <HAL_FLASHEx_Erase+0xd4>)
 8001036:	f023 0304 	bic.w	r3, r3, #4
 800103a:	6113      	str	r3, [r2, #16]
 800103c:	e031      	b.n	80010a2 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800103e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001042:	f7ff ff33 	bl	8000eac <FLASH_WaitForLastOperation>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d12a      	bne.n	80010a2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001052:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	e019      	b.n	8001090 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800105c:	68b8      	ldr	r0, [r7, #8]
 800105e:	f000 f849 	bl	80010f4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001062:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001066:	f7ff ff21 	bl	8000eac <FLASH_WaitForLastOperation>
 800106a:	4603      	mov	r3, r0
 800106c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800106e:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <HAL_FLASHEx_Erase+0xd4>)
 8001070:	691b      	ldr	r3, [r3, #16]
 8001072:	4a11      	ldr	r2, [pc, #68]	@ (80010b8 <HAL_FLASHEx_Erase+0xd4>)
 8001074:	f023 0302 	bic.w	r3, r3, #2
 8001078:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	601a      	str	r2, [r3, #0]
            break;
 8001086:	e00c      	b.n	80010a2 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800108e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	029a      	lsls	r2, r3, #10
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	4413      	add	r3, r2
 800109c:	68ba      	ldr	r2, [r7, #8]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d3dc      	bcc.n	800105c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80010a2:	4b04      	ldr	r3, [pc, #16]	@ (80010b4 <HAL_FLASHEx_Erase+0xd0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	761a      	strb	r2, [r3, #24]

  return status;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000060 	.word	0x20000060
 80010b8:	40022000 	.word	0x40022000

080010bc <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010c4:	4b09      	ldr	r3, [pc, #36]	@ (80010ec <FLASH_MassErase+0x30>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <FLASH_MassErase+0x34>)
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	4a08      	ldr	r2, [pc, #32]	@ (80010f0 <FLASH_MassErase+0x34>)
 80010d0:	f043 0304 	orr.w	r3, r3, #4
 80010d4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80010d6:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <FLASH_MassErase+0x34>)
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	4a05      	ldr	r2, [pc, #20]	@ (80010f0 <FLASH_MassErase+0x34>)
 80010dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010e0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr
 80010ec:	20000060 	.word	0x20000060
 80010f0:	40022000 	.word	0x40022000

080010f4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010fc:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <FLASH_PageErase+0x38>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001102:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <FLASH_PageErase+0x3c>)
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	4a0a      	ldr	r2, [pc, #40]	@ (8001130 <FLASH_PageErase+0x3c>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800110e:	4a08      	ldr	r2, [pc, #32]	@ (8001130 <FLASH_PageErase+0x3c>)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <FLASH_PageErase+0x3c>)
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	4a05      	ldr	r2, [pc, #20]	@ (8001130 <FLASH_PageErase+0x3c>)
 800111a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800111e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000060 	.word	0x20000060
 8001130:	40022000 	.word	0x40022000

08001134 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001134:	b480      	push	{r7}
 8001136:	b08b      	sub	sp, #44	@ 0x2c
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800113e:	2300      	movs	r3, #0
 8001140:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001142:	2300      	movs	r3, #0
 8001144:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001146:	e161      	b.n	800140c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001148:	2201      	movs	r2, #1
 800114a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	69fa      	ldr	r2, [r7, #28]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	429a      	cmp	r2, r3
 8001162:	f040 8150 	bne.w	8001406 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	4a97      	ldr	r2, [pc, #604]	@ (80013c8 <HAL_GPIO_Init+0x294>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d05e      	beq.n	800122e <HAL_GPIO_Init+0xfa>
 8001170:	4a95      	ldr	r2, [pc, #596]	@ (80013c8 <HAL_GPIO_Init+0x294>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d875      	bhi.n	8001262 <HAL_GPIO_Init+0x12e>
 8001176:	4a95      	ldr	r2, [pc, #596]	@ (80013cc <HAL_GPIO_Init+0x298>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d058      	beq.n	800122e <HAL_GPIO_Init+0xfa>
 800117c:	4a93      	ldr	r2, [pc, #588]	@ (80013cc <HAL_GPIO_Init+0x298>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d86f      	bhi.n	8001262 <HAL_GPIO_Init+0x12e>
 8001182:	4a93      	ldr	r2, [pc, #588]	@ (80013d0 <HAL_GPIO_Init+0x29c>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d052      	beq.n	800122e <HAL_GPIO_Init+0xfa>
 8001188:	4a91      	ldr	r2, [pc, #580]	@ (80013d0 <HAL_GPIO_Init+0x29c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d869      	bhi.n	8001262 <HAL_GPIO_Init+0x12e>
 800118e:	4a91      	ldr	r2, [pc, #580]	@ (80013d4 <HAL_GPIO_Init+0x2a0>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d04c      	beq.n	800122e <HAL_GPIO_Init+0xfa>
 8001194:	4a8f      	ldr	r2, [pc, #572]	@ (80013d4 <HAL_GPIO_Init+0x2a0>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d863      	bhi.n	8001262 <HAL_GPIO_Init+0x12e>
 800119a:	4a8f      	ldr	r2, [pc, #572]	@ (80013d8 <HAL_GPIO_Init+0x2a4>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d046      	beq.n	800122e <HAL_GPIO_Init+0xfa>
 80011a0:	4a8d      	ldr	r2, [pc, #564]	@ (80013d8 <HAL_GPIO_Init+0x2a4>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d85d      	bhi.n	8001262 <HAL_GPIO_Init+0x12e>
 80011a6:	2b12      	cmp	r3, #18
 80011a8:	d82a      	bhi.n	8001200 <HAL_GPIO_Init+0xcc>
 80011aa:	2b12      	cmp	r3, #18
 80011ac:	d859      	bhi.n	8001262 <HAL_GPIO_Init+0x12e>
 80011ae:	a201      	add	r2, pc, #4	@ (adr r2, 80011b4 <HAL_GPIO_Init+0x80>)
 80011b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b4:	0800122f 	.word	0x0800122f
 80011b8:	08001209 	.word	0x08001209
 80011bc:	0800121b 	.word	0x0800121b
 80011c0:	0800125d 	.word	0x0800125d
 80011c4:	08001263 	.word	0x08001263
 80011c8:	08001263 	.word	0x08001263
 80011cc:	08001263 	.word	0x08001263
 80011d0:	08001263 	.word	0x08001263
 80011d4:	08001263 	.word	0x08001263
 80011d8:	08001263 	.word	0x08001263
 80011dc:	08001263 	.word	0x08001263
 80011e0:	08001263 	.word	0x08001263
 80011e4:	08001263 	.word	0x08001263
 80011e8:	08001263 	.word	0x08001263
 80011ec:	08001263 	.word	0x08001263
 80011f0:	08001263 	.word	0x08001263
 80011f4:	08001263 	.word	0x08001263
 80011f8:	08001211 	.word	0x08001211
 80011fc:	08001225 	.word	0x08001225
 8001200:	4a76      	ldr	r2, [pc, #472]	@ (80013dc <HAL_GPIO_Init+0x2a8>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d013      	beq.n	800122e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001206:	e02c      	b.n	8001262 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	623b      	str	r3, [r7, #32]
          break;
 800120e:	e029      	b.n	8001264 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	3304      	adds	r3, #4
 8001216:	623b      	str	r3, [r7, #32]
          break;
 8001218:	e024      	b.n	8001264 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	3308      	adds	r3, #8
 8001220:	623b      	str	r3, [r7, #32]
          break;
 8001222:	e01f      	b.n	8001264 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	330c      	adds	r3, #12
 800122a:	623b      	str	r3, [r7, #32]
          break;
 800122c:	e01a      	b.n	8001264 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d102      	bne.n	800123c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001236:	2304      	movs	r3, #4
 8001238:	623b      	str	r3, [r7, #32]
          break;
 800123a:	e013      	b.n	8001264 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d105      	bne.n	8001250 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001244:	2308      	movs	r3, #8
 8001246:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69fa      	ldr	r2, [r7, #28]
 800124c:	611a      	str	r2, [r3, #16]
          break;
 800124e:	e009      	b.n	8001264 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001250:	2308      	movs	r3, #8
 8001252:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69fa      	ldr	r2, [r7, #28]
 8001258:	615a      	str	r2, [r3, #20]
          break;
 800125a:	e003      	b.n	8001264 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
          break;
 8001260:	e000      	b.n	8001264 <HAL_GPIO_Init+0x130>
          break;
 8001262:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	2bff      	cmp	r3, #255	@ 0xff
 8001268:	d801      	bhi.n	800126e <HAL_GPIO_Init+0x13a>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	e001      	b.n	8001272 <HAL_GPIO_Init+0x13e>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3304      	adds	r3, #4
 8001272:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	2bff      	cmp	r3, #255	@ 0xff
 8001278:	d802      	bhi.n	8001280 <HAL_GPIO_Init+0x14c>
 800127a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	e002      	b.n	8001286 <HAL_GPIO_Init+0x152>
 8001280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001282:	3b08      	subs	r3, #8
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	210f      	movs	r1, #15
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	fa01 f303 	lsl.w	r3, r1, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	401a      	ands	r2, r3
 8001298:	6a39      	ldr	r1, [r7, #32]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	fa01 f303 	lsl.w	r3, r1, r3
 80012a0:	431a      	orrs	r2, r3
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 80a9 	beq.w	8001406 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012b4:	4b4a      	ldr	r3, [pc, #296]	@ (80013e0 <HAL_GPIO_Init+0x2ac>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4a49      	ldr	r2, [pc, #292]	@ (80013e0 <HAL_GPIO_Init+0x2ac>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6193      	str	r3, [r2, #24]
 80012c0:	4b47      	ldr	r3, [pc, #284]	@ (80013e0 <HAL_GPIO_Init+0x2ac>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012cc:	4a45      	ldr	r2, [pc, #276]	@ (80013e4 <HAL_GPIO_Init+0x2b0>)
 80012ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	3302      	adds	r3, #2
 80012d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	220f      	movs	r2, #15
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	4013      	ands	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a3d      	ldr	r2, [pc, #244]	@ (80013e8 <HAL_GPIO_Init+0x2b4>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d00d      	beq.n	8001314 <HAL_GPIO_Init+0x1e0>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a3c      	ldr	r2, [pc, #240]	@ (80013ec <HAL_GPIO_Init+0x2b8>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d007      	beq.n	8001310 <HAL_GPIO_Init+0x1dc>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a3b      	ldr	r2, [pc, #236]	@ (80013f0 <HAL_GPIO_Init+0x2bc>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d101      	bne.n	800130c <HAL_GPIO_Init+0x1d8>
 8001308:	2302      	movs	r3, #2
 800130a:	e004      	b.n	8001316 <HAL_GPIO_Init+0x1e2>
 800130c:	2303      	movs	r3, #3
 800130e:	e002      	b.n	8001316 <HAL_GPIO_Init+0x1e2>
 8001310:	2301      	movs	r3, #1
 8001312:	e000      	b.n	8001316 <HAL_GPIO_Init+0x1e2>
 8001314:	2300      	movs	r3, #0
 8001316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001318:	f002 0203 	and.w	r2, r2, #3
 800131c:	0092      	lsls	r2, r2, #2
 800131e:	4093      	lsls	r3, r2
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	4313      	orrs	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001326:	492f      	ldr	r1, [pc, #188]	@ (80013e4 <HAL_GPIO_Init+0x2b0>)
 8001328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132a:	089b      	lsrs	r3, r3, #2
 800132c:	3302      	adds	r3, #2
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001340:	4b2c      	ldr	r3, [pc, #176]	@ (80013f4 <HAL_GPIO_Init+0x2c0>)
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	492b      	ldr	r1, [pc, #172]	@ (80013f4 <HAL_GPIO_Init+0x2c0>)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	608b      	str	r3, [r1, #8]
 800134c:	e006      	b.n	800135c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800134e:	4b29      	ldr	r3, [pc, #164]	@ (80013f4 <HAL_GPIO_Init+0x2c0>)
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	43db      	mvns	r3, r3
 8001356:	4927      	ldr	r1, [pc, #156]	@ (80013f4 <HAL_GPIO_Init+0x2c0>)
 8001358:	4013      	ands	r3, r2
 800135a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d006      	beq.n	8001376 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001368:	4b22      	ldr	r3, [pc, #136]	@ (80013f4 <HAL_GPIO_Init+0x2c0>)
 800136a:	68da      	ldr	r2, [r3, #12]
 800136c:	4921      	ldr	r1, [pc, #132]	@ (80013f4 <HAL_GPIO_Init+0x2c0>)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	60cb      	str	r3, [r1, #12]
 8001374:	e006      	b.n	8001384 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001376:	4b1f      	ldr	r3, [pc, #124]	@ (80013f4 <HAL_GPIO_Init+0x2c0>)
 8001378:	68da      	ldr	r2, [r3, #12]
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	43db      	mvns	r3, r3
 800137e:	491d      	ldr	r1, [pc, #116]	@ (80013f4 <HAL_GPIO_Init+0x2c0>)
 8001380:	4013      	ands	r3, r2
 8001382:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d006      	beq.n	800139e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001390:	4b18      	ldr	r3, [pc, #96]	@ (80013f4 <HAL_GPIO_Init+0x2c0>)
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	4917      	ldr	r1, [pc, #92]	@ (80013f4 <HAL_GPIO_Init+0x2c0>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	4313      	orrs	r3, r2
 800139a:	604b      	str	r3, [r1, #4]
 800139c:	e006      	b.n	80013ac <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800139e:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <HAL_GPIO_Init+0x2c0>)
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	4913      	ldr	r1, [pc, #76]	@ (80013f4 <HAL_GPIO_Init+0x2c0>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d01f      	beq.n	80013f8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013b8:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <HAL_GPIO_Init+0x2c0>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	490d      	ldr	r1, [pc, #52]	@ (80013f4 <HAL_GPIO_Init+0x2c0>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	600b      	str	r3, [r1, #0]
 80013c4:	e01f      	b.n	8001406 <HAL_GPIO_Init+0x2d2>
 80013c6:	bf00      	nop
 80013c8:	10320000 	.word	0x10320000
 80013cc:	10310000 	.word	0x10310000
 80013d0:	10220000 	.word	0x10220000
 80013d4:	10210000 	.word	0x10210000
 80013d8:	10120000 	.word	0x10120000
 80013dc:	10110000 	.word	0x10110000
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40010000 	.word	0x40010000
 80013e8:	40010800 	.word	0x40010800
 80013ec:	40010c00 	.word	0x40010c00
 80013f0:	40011000 	.word	0x40011000
 80013f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001428 <HAL_GPIO_Init+0x2f4>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	43db      	mvns	r3, r3
 8001400:	4909      	ldr	r1, [pc, #36]	@ (8001428 <HAL_GPIO_Init+0x2f4>)
 8001402:	4013      	ands	r3, r2
 8001404:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001408:	3301      	adds	r3, #1
 800140a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001412:	fa22 f303 	lsr.w	r3, r2, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	f47f ae96 	bne.w	8001148 <HAL_GPIO_Init+0x14>
  }
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	372c      	adds	r7, #44	@ 0x2c
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	40010400 	.word	0x40010400

0800142c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]
 8001438:	4613      	mov	r3, r2
 800143a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800143c:	787b      	ldrb	r3, [r7, #1]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001442:	887a      	ldrh	r2, [r7, #2]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001448:	e003      	b.n	8001452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800144a:	887b      	ldrh	r3, [r7, #2]
 800144c:	041a      	lsls	r2, r3, #16
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	611a      	str	r2, [r3, #16]
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e272      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 8087 	beq.w	800158a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800147c:	4b92      	ldr	r3, [pc, #584]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 030c 	and.w	r3, r3, #12
 8001484:	2b04      	cmp	r3, #4
 8001486:	d00c      	beq.n	80014a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001488:	4b8f      	ldr	r3, [pc, #572]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 030c 	and.w	r3, r3, #12
 8001490:	2b08      	cmp	r3, #8
 8001492:	d112      	bne.n	80014ba <HAL_RCC_OscConfig+0x5e>
 8001494:	4b8c      	ldr	r3, [pc, #560]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800149c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014a0:	d10b      	bne.n	80014ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a2:	4b89      	ldr	r3, [pc, #548]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d06c      	beq.n	8001588 <HAL_RCC_OscConfig+0x12c>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d168      	bne.n	8001588 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e24c      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014c2:	d106      	bne.n	80014d2 <HAL_RCC_OscConfig+0x76>
 80014c4:	4b80      	ldr	r3, [pc, #512]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a7f      	ldr	r2, [pc, #508]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 80014ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	e02e      	b.n	8001530 <HAL_RCC_OscConfig+0xd4>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10c      	bne.n	80014f4 <HAL_RCC_OscConfig+0x98>
 80014da:	4b7b      	ldr	r3, [pc, #492]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a7a      	ldr	r2, [pc, #488]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 80014e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	4b78      	ldr	r3, [pc, #480]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a77      	ldr	r2, [pc, #476]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	e01d      	b.n	8001530 <HAL_RCC_OscConfig+0xd4>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014fc:	d10c      	bne.n	8001518 <HAL_RCC_OscConfig+0xbc>
 80014fe:	4b72      	ldr	r3, [pc, #456]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a71      	ldr	r2, [pc, #452]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 8001504:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	4b6f      	ldr	r3, [pc, #444]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a6e      	ldr	r2, [pc, #440]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 8001510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	e00b      	b.n	8001530 <HAL_RCC_OscConfig+0xd4>
 8001518:	4b6b      	ldr	r3, [pc, #428]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a6a      	ldr	r2, [pc, #424]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 800151e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	4b68      	ldr	r3, [pc, #416]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a67      	ldr	r2, [pc, #412]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 800152a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800152e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d013      	beq.n	8001560 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff f8d2 	bl	80006e0 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001540:	f7ff f8ce 	bl	80006e0 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b64      	cmp	r3, #100	@ 0x64
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e200      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001552:	4b5d      	ldr	r3, [pc, #372]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f0      	beq.n	8001540 <HAL_RCC_OscConfig+0xe4>
 800155e:	e014      	b.n	800158a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff f8be 	bl	80006e0 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001568:	f7ff f8ba 	bl	80006e0 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b64      	cmp	r3, #100	@ 0x64
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e1ec      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157a:	4b53      	ldr	r3, [pc, #332]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x10c>
 8001586:	e000      	b.n	800158a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d063      	beq.n	800165e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001596:	4b4c      	ldr	r3, [pc, #304]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00b      	beq.n	80015ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015a2:	4b49      	ldr	r3, [pc, #292]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 030c 	and.w	r3, r3, #12
 80015aa:	2b08      	cmp	r3, #8
 80015ac:	d11c      	bne.n	80015e8 <HAL_RCC_OscConfig+0x18c>
 80015ae:	4b46      	ldr	r3, [pc, #280]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d116      	bne.n	80015e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ba:	4b43      	ldr	r3, [pc, #268]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d005      	beq.n	80015d2 <HAL_RCC_OscConfig+0x176>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d001      	beq.n	80015d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e1c0      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d2:	4b3d      	ldr	r3, [pc, #244]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	4939      	ldr	r1, [pc, #228]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015e6:	e03a      	b.n	800165e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d020      	beq.n	8001632 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015f0:	4b36      	ldr	r3, [pc, #216]	@ (80016cc <HAL_RCC_OscConfig+0x270>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f6:	f7ff f873 	bl	80006e0 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015fe:	f7ff f86f 	bl	80006e0 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e1a1      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001610:	4b2d      	ldr	r3, [pc, #180]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161c:	4b2a      	ldr	r3, [pc, #168]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	4927      	ldr	r1, [pc, #156]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 800162c:	4313      	orrs	r3, r2
 800162e:	600b      	str	r3, [r1, #0]
 8001630:	e015      	b.n	800165e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001632:	4b26      	ldr	r3, [pc, #152]	@ (80016cc <HAL_RCC_OscConfig+0x270>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001638:	f7ff f852 	bl	80006e0 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001640:	f7ff f84e 	bl	80006e0 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e180      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001652:	4b1d      	ldr	r3, [pc, #116]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	2b00      	cmp	r3, #0
 8001668:	d03a      	beq.n	80016e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d019      	beq.n	80016a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001672:	4b17      	ldr	r3, [pc, #92]	@ (80016d0 <HAL_RCC_OscConfig+0x274>)
 8001674:	2201      	movs	r2, #1
 8001676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001678:	f7ff f832 	bl	80006e0 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001680:	f7ff f82e 	bl	80006e0 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e160      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001692:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <HAL_RCC_OscConfig+0x26c>)
 8001694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800169e:	2001      	movs	r0, #1
 80016a0:	f000 fa9c 	bl	8001bdc <RCC_Delay>
 80016a4:	e01c      	b.n	80016e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a6:	4b0a      	ldr	r3, [pc, #40]	@ (80016d0 <HAL_RCC_OscConfig+0x274>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ac:	f7ff f818 	bl	80006e0 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b2:	e00f      	b.n	80016d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b4:	f7ff f814 	bl	80006e0 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d908      	bls.n	80016d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e146      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
 80016c6:	bf00      	nop
 80016c8:	40021000 	.word	0x40021000
 80016cc:	42420000 	.word	0x42420000
 80016d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d4:	4b92      	ldr	r3, [pc, #584]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 80016d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1e9      	bne.n	80016b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 80a6 	beq.w	800183a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016f2:	4b8b      	ldr	r3, [pc, #556]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10d      	bne.n	800171a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016fe:	4b88      	ldr	r3, [pc, #544]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	4a87      	ldr	r2, [pc, #540]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 8001704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001708:	61d3      	str	r3, [r2, #28]
 800170a:	4b85      	ldr	r3, [pc, #532]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001716:	2301      	movs	r3, #1
 8001718:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171a:	4b82      	ldr	r3, [pc, #520]	@ (8001924 <HAL_RCC_OscConfig+0x4c8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001722:	2b00      	cmp	r3, #0
 8001724:	d118      	bne.n	8001758 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001726:	4b7f      	ldr	r3, [pc, #508]	@ (8001924 <HAL_RCC_OscConfig+0x4c8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a7e      	ldr	r2, [pc, #504]	@ (8001924 <HAL_RCC_OscConfig+0x4c8>)
 800172c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001730:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001732:	f7fe ffd5 	bl	80006e0 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800173a:	f7fe ffd1 	bl	80006e0 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b64      	cmp	r3, #100	@ 0x64
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e103      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174c:	4b75      	ldr	r3, [pc, #468]	@ (8001924 <HAL_RCC_OscConfig+0x4c8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d106      	bne.n	800176e <HAL_RCC_OscConfig+0x312>
 8001760:	4b6f      	ldr	r3, [pc, #444]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	4a6e      	ldr	r2, [pc, #440]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	6213      	str	r3, [r2, #32]
 800176c:	e02d      	b.n	80017ca <HAL_RCC_OscConfig+0x36e>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10c      	bne.n	8001790 <HAL_RCC_OscConfig+0x334>
 8001776:	4b6a      	ldr	r3, [pc, #424]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	4a69      	ldr	r2, [pc, #420]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 800177c:	f023 0301 	bic.w	r3, r3, #1
 8001780:	6213      	str	r3, [r2, #32]
 8001782:	4b67      	ldr	r3, [pc, #412]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 8001784:	6a1b      	ldr	r3, [r3, #32]
 8001786:	4a66      	ldr	r2, [pc, #408]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 8001788:	f023 0304 	bic.w	r3, r3, #4
 800178c:	6213      	str	r3, [r2, #32]
 800178e:	e01c      	b.n	80017ca <HAL_RCC_OscConfig+0x36e>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	2b05      	cmp	r3, #5
 8001796:	d10c      	bne.n	80017b2 <HAL_RCC_OscConfig+0x356>
 8001798:	4b61      	ldr	r3, [pc, #388]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	4a60      	ldr	r2, [pc, #384]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 800179e:	f043 0304 	orr.w	r3, r3, #4
 80017a2:	6213      	str	r3, [r2, #32]
 80017a4:	4b5e      	ldr	r3, [pc, #376]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	4a5d      	ldr	r2, [pc, #372]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	6213      	str	r3, [r2, #32]
 80017b0:	e00b      	b.n	80017ca <HAL_RCC_OscConfig+0x36e>
 80017b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	4a5a      	ldr	r2, [pc, #360]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	f023 0301 	bic.w	r3, r3, #1
 80017bc:	6213      	str	r3, [r2, #32]
 80017be:	4b58      	ldr	r3, [pc, #352]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	4a57      	ldr	r2, [pc, #348]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	f023 0304 	bic.w	r3, r3, #4
 80017c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d015      	beq.n	80017fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d2:	f7fe ff85 	bl	80006e0 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d8:	e00a      	b.n	80017f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017da:	f7fe ff81 	bl	80006e0 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e0b1      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0ee      	beq.n	80017da <HAL_RCC_OscConfig+0x37e>
 80017fc:	e014      	b.n	8001828 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fe:	f7fe ff6f 	bl	80006e0 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001804:	e00a      	b.n	800181c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001806:	f7fe ff6b 	bl	80006e0 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001814:	4293      	cmp	r3, r2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e09b      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800181c:	4b40      	ldr	r3, [pc, #256]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1ee      	bne.n	8001806 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001828:	7dfb      	ldrb	r3, [r7, #23]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d105      	bne.n	800183a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800182e:	4b3c      	ldr	r3, [pc, #240]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	4a3b      	ldr	r2, [pc, #236]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 8001834:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001838:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 8087 	beq.w	8001952 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001844:	4b36      	ldr	r3, [pc, #216]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 030c 	and.w	r3, r3, #12
 800184c:	2b08      	cmp	r3, #8
 800184e:	d061      	beq.n	8001914 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	2b02      	cmp	r3, #2
 8001856:	d146      	bne.n	80018e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001858:	4b33      	ldr	r3, [pc, #204]	@ (8001928 <HAL_RCC_OscConfig+0x4cc>)
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185e:	f7fe ff3f 	bl	80006e0 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001866:	f7fe ff3b 	bl	80006e0 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e06d      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001878:	4b29      	ldr	r3, [pc, #164]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1f0      	bne.n	8001866 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800188c:	d108      	bne.n	80018a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800188e:	4b24      	ldr	r3, [pc, #144]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	4921      	ldr	r1, [pc, #132]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 800189c:	4313      	orrs	r3, r2
 800189e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a19      	ldr	r1, [r3, #32]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b0:	430b      	orrs	r3, r1
 80018b2:	491b      	ldr	r1, [pc, #108]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001928 <HAL_RCC_OscConfig+0x4cc>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018be:	f7fe ff0f 	bl	80006e0 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c6:	f7fe ff0b 	bl	80006e0 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e03d      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018d8:	4b11      	ldr	r3, [pc, #68]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x46a>
 80018e4:	e035      	b.n	8001952 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e6:	4b10      	ldr	r3, [pc, #64]	@ (8001928 <HAL_RCC_OscConfig+0x4cc>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7fe fef8 	bl	80006e0 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f4:	f7fe fef4 	bl	80006e0 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e026      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001906:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <HAL_RCC_OscConfig+0x4c4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x498>
 8001912:	e01e      	b.n	8001952 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d107      	bne.n	800192c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e019      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
 8001920:	40021000 	.word	0x40021000
 8001924:	40007000 	.word	0x40007000
 8001928:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800192c:	4b0b      	ldr	r3, [pc, #44]	@ (800195c <HAL_RCC_OscConfig+0x500>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	429a      	cmp	r2, r3
 800193e:	d106      	bne.n	800194e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194a:	429a      	cmp	r2, r3
 800194c:	d001      	beq.n	8001952 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40021000 	.word	0x40021000

08001960 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e0d0      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001974:	4b6a      	ldr	r3, [pc, #424]	@ (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d910      	bls.n	80019a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001982:	4b67      	ldr	r3, [pc, #412]	@ (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 0207 	bic.w	r2, r3, #7
 800198a:	4965      	ldr	r1, [pc, #404]	@ (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	4313      	orrs	r3, r2
 8001990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001992:	4b63      	ldr	r3, [pc, #396]	@ (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e0b8      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d020      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019bc:	4b59      	ldr	r3, [pc, #356]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	4a58      	ldr	r2, [pc, #352]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80019c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d005      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019d4:	4b53      	ldr	r3, [pc, #332]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	4a52      	ldr	r2, [pc, #328]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019da:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80019de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e0:	4b50      	ldr	r3, [pc, #320]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	494d      	ldr	r1, [pc, #308]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d040      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d107      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a06:	4b47      	ldr	r3, [pc, #284]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d115      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e07f      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d107      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1e:	4b41      	ldr	r3, [pc, #260]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d109      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e073      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e06b      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a3e:	4b39      	ldr	r3, [pc, #228]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f023 0203 	bic.w	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	4936      	ldr	r1, [pc, #216]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a50:	f7fe fe46 	bl	80006e0 <HAL_GetTick>
 8001a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a58:	f7fe fe42 	bl	80006e0 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e053      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 020c 	and.w	r2, r3, #12
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d1eb      	bne.n	8001a58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a80:	4b27      	ldr	r3, [pc, #156]	@ (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d210      	bcs.n	8001ab0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b24      	ldr	r3, [pc, #144]	@ (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 0207 	bic.w	r2, r3, #7
 8001a96:	4922      	ldr	r1, [pc, #136]	@ (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	4b20      	ldr	r3, [pc, #128]	@ (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e032      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d008      	beq.n	8001ace <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001abc:	4b19      	ldr	r3, [pc, #100]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	4916      	ldr	r1, [pc, #88]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d009      	beq.n	8001aee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ada:	4b12      	ldr	r3, [pc, #72]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	490e      	ldr	r1, [pc, #56]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aee:	f000 f821 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 8001af2:	4602      	mov	r2, r0
 8001af4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	091b      	lsrs	r3, r3, #4
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	490a      	ldr	r1, [pc, #40]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c8>)
 8001b00:	5ccb      	ldrb	r3, [r1, r3]
 8001b02:	fa22 f303 	lsr.w	r3, r2, r3
 8001b06:	4a09      	ldr	r2, [pc, #36]	@ (8001b2c <HAL_RCC_ClockConfig+0x1cc>)
 8001b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <HAL_RCC_ClockConfig+0x1d0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fda4 	bl	800065c <HAL_InitTick>

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40022000 	.word	0x40022000
 8001b24:	40021000 	.word	0x40021000
 8001b28:	08001df4 	.word	0x08001df4
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	20000004 	.word	0x20000004

08001b34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d002      	beq.n	8001b64 <HAL_RCC_GetSysClockFreq+0x30>
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d003      	beq.n	8001b6a <HAL_RCC_GetSysClockFreq+0x36>
 8001b62:	e027      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b64:	4b19      	ldr	r3, [pc, #100]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x98>)
 8001b66:	613b      	str	r3, [r7, #16]
      break;
 8001b68:	e027      	b.n	8001bba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	0c9b      	lsrs	r3, r3, #18
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	4a17      	ldr	r2, [pc, #92]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b74:	5cd3      	ldrb	r3, [r2, r3]
 8001b76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d010      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b82:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	0c5b      	lsrs	r3, r3, #17
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	4a11      	ldr	r2, [pc, #68]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b8e:	5cd3      	ldrb	r3, [r2, r3]
 8001b90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a0d      	ldr	r2, [pc, #52]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x98>)
 8001b96:	fb03 f202 	mul.w	r2, r3, r2
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	e004      	b.n	8001bae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8001bd8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ba8:	fb02 f303 	mul.w	r3, r2, r3
 8001bac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	613b      	str	r3, [r7, #16]
      break;
 8001bb2:	e002      	b.n	8001bba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bb4:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x98>)
 8001bb6:	613b      	str	r3, [r7, #16]
      break;
 8001bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bba:	693b      	ldr	r3, [r7, #16]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	371c      	adds	r7, #28
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	007a1200 	.word	0x007a1200
 8001bd0:	08001e04 	.word	0x08001e04
 8001bd4:	08001e14 	.word	0x08001e14
 8001bd8:	003d0900 	.word	0x003d0900

08001bdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001be4:	4b0a      	ldr	r3, [pc, #40]	@ (8001c10 <RCC_Delay+0x34>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a0a      	ldr	r2, [pc, #40]	@ (8001c14 <RCC_Delay+0x38>)
 8001bea:	fba2 2303 	umull	r2, r3, r2, r3
 8001bee:	0a5b      	lsrs	r3, r3, #9
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	fb02 f303 	mul.w	r3, r2, r3
 8001bf6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bf8:	bf00      	nop
  }
  while (Delay --);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	1e5a      	subs	r2, r3, #1
 8001bfe:	60fa      	str	r2, [r7, #12]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1f9      	bne.n	8001bf8 <RCC_Delay+0x1c>
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	20000000 	.word	0x20000000
 8001c14:	10624dd3 	.word	0x10624dd3

08001c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	2300      	movs	r3, #0
 8001c26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d07d      	beq.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001c34:	2300      	movs	r3, #0
 8001c36:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c38:	4b4f      	ldr	r3, [pc, #316]	@ (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10d      	bne.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c44:	4b4c      	ldr	r3, [pc, #304]	@ (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	4a4b      	ldr	r2, [pc, #300]	@ (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c4e:	61d3      	str	r3, [r2, #28]
 8001c50:	4b49      	ldr	r3, [pc, #292]	@ (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c60:	4b46      	ldr	r3, [pc, #280]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d118      	bne.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c6c:	4b43      	ldr	r3, [pc, #268]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a42      	ldr	r2, [pc, #264]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c78:	f7fe fd32 	bl	80006e0 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7e:	e008      	b.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c80:	f7fe fd2e 	bl	80006e0 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	@ 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e06d      	b.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c92:	4b3a      	ldr	r3, [pc, #232]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c9e:	4b36      	ldr	r3, [pc, #216]	@ (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ca6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d02e      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d027      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cbc:	4b2e      	ldr	r3, [pc, #184]	@ (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001cc4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cc6:	4b2e      	ldr	r3, [pc, #184]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ccc:	4b2c      	ldr	r3, [pc, #176]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001cd2:	4a29      	ldr	r2, [pc, #164]	@ (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d014      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce2:	f7fe fcfd 	bl	80006e0 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce8:	e00a      	b.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cea:	f7fe fcf9 	bl	80006e0 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e036      	b.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d00:	4b1d      	ldr	r3, [pc, #116]	@ (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0ee      	beq.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	4917      	ldr	r1, [pc, #92]	@ (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d1e:	7dfb      	ldrb	r3, [r7, #23]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d105      	bne.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d24:	4b14      	ldr	r3, [pc, #80]	@ (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	4a13      	ldr	r2, [pc, #76]	@ (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d008      	beq.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	490b      	ldr	r1, [pc, #44]	@ (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d008      	beq.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d5a:	4b07      	ldr	r3, [pc, #28]	@ (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	4904      	ldr	r1, [pc, #16]	@ (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40007000 	.word	0x40007000
 8001d80:	42420440 	.word	0x42420440

08001d84 <memset>:
 8001d84:	4603      	mov	r3, r0
 8001d86:	4402      	add	r2, r0
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d100      	bne.n	8001d8e <memset+0xa>
 8001d8c:	4770      	bx	lr
 8001d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8001d92:	e7f9      	b.n	8001d88 <memset+0x4>

08001d94 <__libc_init_array>:
 8001d94:	b570      	push	{r4, r5, r6, lr}
 8001d96:	2600      	movs	r6, #0
 8001d98:	4d0c      	ldr	r5, [pc, #48]	@ (8001dcc <__libc_init_array+0x38>)
 8001d9a:	4c0d      	ldr	r4, [pc, #52]	@ (8001dd0 <__libc_init_array+0x3c>)
 8001d9c:	1b64      	subs	r4, r4, r5
 8001d9e:	10a4      	asrs	r4, r4, #2
 8001da0:	42a6      	cmp	r6, r4
 8001da2:	d109      	bne.n	8001db8 <__libc_init_array+0x24>
 8001da4:	f000 f81a 	bl	8001ddc <_init>
 8001da8:	2600      	movs	r6, #0
 8001daa:	4d0a      	ldr	r5, [pc, #40]	@ (8001dd4 <__libc_init_array+0x40>)
 8001dac:	4c0a      	ldr	r4, [pc, #40]	@ (8001dd8 <__libc_init_array+0x44>)
 8001dae:	1b64      	subs	r4, r4, r5
 8001db0:	10a4      	asrs	r4, r4, #2
 8001db2:	42a6      	cmp	r6, r4
 8001db4:	d105      	bne.n	8001dc2 <__libc_init_array+0x2e>
 8001db6:	bd70      	pop	{r4, r5, r6, pc}
 8001db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dbc:	4798      	blx	r3
 8001dbe:	3601      	adds	r6, #1
 8001dc0:	e7ee      	b.n	8001da0 <__libc_init_array+0xc>
 8001dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dc6:	4798      	blx	r3
 8001dc8:	3601      	adds	r6, #1
 8001dca:	e7f2      	b.n	8001db2 <__libc_init_array+0x1e>
 8001dcc:	08001e18 	.word	0x08001e18
 8001dd0:	08001e18 	.word	0x08001e18
 8001dd4:	08001e18 	.word	0x08001e18
 8001dd8:	08001e1c 	.word	0x08001e1c

08001ddc <_init>:
 8001ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dde:	bf00      	nop
 8001de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001de2:	bc08      	pop	{r3}
 8001de4:	469e      	mov	lr, r3
 8001de6:	4770      	bx	lr

08001de8 <_fini>:
 8001de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dea:	bf00      	nop
 8001dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dee:	bc08      	pop	{r3}
 8001df0:	469e      	mov	lr, r3
 8001df2:	4770      	bx	lr
